<?xml version="1.0"?>
<ruleset name="DELTA-Custom-Development-WP">
	<description>A custom set of rules based on WordPress project</description>

	<!-- Only scan PHP files. -->
	<arg name="extensions" value="php"/>

	<!-- Check up to 8 files simultanously. -->
	<arg name="parallel" value="8"/>

	<!-- Load additional standards. -->
	<config name="installed_paths" value="/misc/temp/phpcs/WordPress-Coding-Standards,/misc/temp/phpcs/PHPCompatibility" />

	<!-- Exclude the Composer Vendor directory. -->
	<exclude-pattern>/vendor/*</exclude-pattern>

	<!-- Exclude the Node Modules directory. -->
	<exclude-pattern>/node_modules/*</exclude-pattern>

	<!-- Exclude minified Javascript files. -->
	<exclude-pattern>*.min.js</exclude-pattern>

	<!-- Include the WordPress-Extra standard. -->
	<rule ref="WordPress-Extra">
		<!--
		We can run `phpcs` with the '-s' flag, which allows us to see the names
		of the sniffs reporting errors. Once we know the sniff names, we can opt
		to exclude sniffs which don't suit our project.
		-->

		<!-- Allow short echo tags, i.e. <?= ?> -->
		<exclude name="Generic.PHP.DisallowShortOpenTag"/>

		<!-- Not using PEAR_Class_Names. -->
		<exclude name="PEAR.NamingConventions.ValidClassName"/>

		<!-- File-level comments are not required. -->
		<exclude name="Squiz.Commenting.FileComment.Missing"/>

		<!-- Comment alignment spacing. -->
		<exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType"/>
		<exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamName"/>

		<!-- Add back? Double quotes only when necessary. -->
		<exclude name="Squiz.Strings.DoubleQuoteUsage"/>

		<!-- Add back? Hyphenated filenames. -->
		<exclude name="WordPress.Files.FileName"/>

		<!-- Add back? No assignments in while conditions. -->
		<exclude name="WordPress.CodeAnalysis.AssignmentInCondition.FoundInWhileCondition"/>

		<!-- No WordPress spaces. -->
		<exclude name="WordPress.Arrays.ArrayDeclarationSpacing"/>
		<exclude name="WordPress.Arrays.ArrayKeySpacingRestrictions"/>
		<exclude name="Generic.WhiteSpace.ArbitraryParenthesesSpacing"/>
		<exclude name="WordPress.WhiteSpace.ControlStructureSpacing"/>
		<exclude name="WordPress.WhiteSpace.OperatorSpacing"/>

		<!-- Yoda is illogical and handled by WordPress.CodeAnalysis.AssignmentInCondition. -->
		<exclude name="WordPress.PHP.YodaConditions"/>

		<!-- WP Specific: Requires use of $wpdb. -->
		<exclude name="WordPress.DB.RestrictedClasses"/>
		<exclude name="WordPress.DB.RestrictedFunctions"/>

		<!-- WP Specific: Requires use of WP functions. -->
		<exclude name="WordPress.Security.EscapeOutput"/>
		<exclude name="WordPress.Security.NonceVerification"/>
		<exclude name="WordPress.WP.AlternativeFunctions"/>
		<exclude name="WordPress.WP.DeprecatedFunctions"/>
		<exclude name="WordPress.WP.EnqueuedResources"/>
		<exclude name="WordPress.WP.TimezoneChange"/>
		<exclude name="WordPress.WP.GlobalVariablesOverride"/>
	</rule>

	<!-- Let's also check that everything is properly documented. -->
	<rule ref="WordPress-Docs"/>

	<!-- Check for PHP cross-version compatibility. -->
	<config name="testVersion" value="5.6-99.0"/>
	<rule ref="PHPCompatibility">
		<!-- Incorrect error. -->
		<exclude name="PHPCompatibility.PHP.NewFunctionParameters.php_uname_modeFound"/>

		<!-- Only applies to PHP 5.6.16 and older. -->
		<exclude name="PHPCompatibility.PHP.NewConstants.mysqli_client_ssl_dont_verify_server_certFound"/>
	</rule>

	<!-- No spaces around function call signature. No WordPress spaces. -->
	<rule ref="PEAR.Functions.FunctionCallSignature">
		<properties>
			<property name="requiredSpacesAfterOpen" value="0"/>
			<property name="requiredSpacesBeforeClose" value="0"/>
		</properties>
	</rule>
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
		<properties>
			<property name="requiredSpacesAfterOpen" value="0"/>
			<property name="requiredSpacesBeforeClose" value="0"/>
		</properties>
	</rule>

	<!-- Code quality. -->
	<rule ref="Generic.CodeAnalysis">
		<!-- Add back? No assignments in while conditions. -->
		<exclude name="Generic.CodeAnalysis.AssignmentInCondition.FoundInWhileCondition"/>
	</rule>
	<rule ref="Generic.Commenting"/>
	<rule ref="Generic.Metrics"/>
	<rule ref="Generic.Strings.UnnecessaryStringConcat">
		<properties>
			<property name="allowMultiline" value="true" />
		</properties>
	</rule>
	<rule ref="Squiz.PHP.CommentedOutCode"/>
	<rule ref="Squiz.PHP.DisallowMultipleAssignments"/>
	<rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
	<rule ref="Squiz.PHP.DiscouragedFunctions"/>
	<rule ref="Squiz.PHP.EmbeddedPhp"/>
	<rule ref="Squiz.PHP.Eval"/>
	<rule ref="Squiz.PHP.InnerFunctions"/>
	<rule ref="Squiz.PHP.LowercasePHPFunctions"/>
	<rule ref="Squiz.PHP.NonExecutableCode"/>

	<!-- Code commenting. -->
	<rule ref="Squiz.Commenting.ClassComment"/>
	<rule ref="Squiz.Commenting.FunctionComment">
		<!-- Comment alignment spacing. -->
		<exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType"/>
		<exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamName"/>
	</rule>
	<rule ref="Squiz.Commenting.InlineComment">
		<!-- Add back? Requires either a period, question mark or exclamation point, but that's too restrictive (e.g. URLs). -->
		<exclude name="Squiz.Commenting.InlineComment.InvalidEndChar" />
	</rule>
	<rule ref="Squiz.Commenting.VariableComment"/>

	<!-- Override statement alignment to have a single space. -->
	<rule ref="Generic.Formatting.MultipleStatementAlignment">
		<properties>
			<property name="maxPadding" value="1" />
		</properties>
	</rule>
	<rule ref="WordPress.Arrays.MultipleStatementAlignment">
		<properties>
			<property name="maxColumn" value="1"/>
		</properties>
	</rule>

	<!-- Scope closing brace on own line. -->
	<rule ref="Squiz.WhiteSpace.ScopeClosingBrace" />

	<!-- Forbidden functions. -->
	<rule ref="Generic.PHP.ForbiddenFunctions">
		<properties>
			<property name="forbiddenFunctions" type="array" value="sizeof=>count,delete=>unset,print=>echo,create_function=>null,array_push=>null,array_key_exists=>isset" />
		</properties>
	</rule>
</ruleset>
